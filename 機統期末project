PYTHON--
========

大二下機率與統計期末project
# 記憶拼圖

import random, pygame, sys, time, sys, copy
from pygame.locals import *


畫面更新率 = 30 
視窗寬 = 640 # 視窗寬/像素
視窗高 = 480 # 視窗高/像素
揭露速度 = 10 
方塊尺寸 = 40 # 方塊長寬/像素
溝尺寸 = 10 
行 = 10
列 = 7 
assert (行 * 列) % 2 == 0, '面板需要兩兩一樣的圖組成'
X邊 = int((視窗寬 - (行 * (方塊尺寸 + 溝尺寸))) / 2)
Y邊 = int((視窗高 - (列 * (方塊尺寸 + 溝尺寸))) / 2)

#            紅    綠    藍
灰      = (100, 100, 100)
海軍藍  = ( 60,  60, 100)
白      = (255, 255, 255)
紅      = (255,   0,   0)
綠      = (  0, 255,   0)
藍      = (  0,   0, 255)
黃      = (255, 255,   0)
橘      = (255, 128,   0)
紫      = (255,   0, 255)
藍綠    = (  0, 255, 255)

背景色 = 'BGCOLOR'

背景色 = 海軍藍
亮背景色 = 灰
方塊顏色 = 白
亮色 = 藍

甜甜圈 = 'DONUT'
正方形 = 'SQUARE'
鑽石 = 'DIAMOND'
線 = 'LINES'
橢圓 = 'OVAL'

範圍= range 
時間等待= pygame.time.wait
事件取得= pygame.event.get
系統離開= sys.exit
畫面更新= pygame.display.update
遊戲開始= pygame.init
遊戲結束= pygame.quit
標題= pygame.display.set_caption
幕大小= pygame.display.set_mode
鐘=     pygame.time.Clock
畫方形=  pygame.draw.rect
畫圓形=  pygame.draw.circle
畫橢圓=  pygame.draw.ellipse
畫線= pygame.draw.line
畫出多角形= pygame.draw.polygon
隨機洗牌= random.shuffle

所有顏色 = (紅, 綠, 藍, 黃, 橘, 紫, 藍綠)
所有形狀 = (甜甜圈, 正方形, 鑽石, 線, 橢圓)

assert len(所有顏色) * len(所有形狀) * 2 >= 行 * 列,"面板太大囉"

def 主程式():
    global 畫面更新率鐘, 版面顯示
    遊戲開始()
    畫面更新率鐘 = 鐘()
    版面顯示 = 幕大小((視窗寬, 視窗高))

    滑鼠X = 0 # 紀錄滑鼠選的X
    滑鼠Y = 0 # 紀錄滑鼠選的Y
    標題('記憶拼圖')

    主面板 = 取得隨機面板()
    已揭露方塊 = 隨機秀出方塊(False)

    第一個按方塊 = None # 儲存第一個按方塊的(x, y)

    版面顯示.fill(背景色)
    啟動遊戲動畫(主面板)

    while True: # 主遊戲迴圈
        滑鼠按的 = False

        版面顯示.fill(背景色) # 畫出視窗
        畫出面板(主面板, 已揭露方塊)

        for 事件 in 事件取得(): 
            if 事件.type == QUIT or (事件.type == KEYUP and 事件.key == K_ESCAPE):
                遊戲結束()
                系統離開()
            elif 事件.type == MOUSEMOTION:
                滑鼠X, 滑鼠Y = 事件.pos
            elif 事件.type == MOUSEBUTTONUP:
                滑鼠X, 滑鼠Y = 事件.pos
                滑鼠按的 = True

        方塊X, 方塊Y = 取得方塊像素(滑鼠X, 滑鼠Y)
        if 方塊X != None and 方塊Y != None:
            # 滑鼠在方塊之上
            if not 已揭露方塊[方塊X][方塊Y]:
                畫亮的方塊(方塊X, 方塊Y)
            if not 已揭露方塊[方塊X][方塊Y] and 滑鼠按的:
                揭露答案動畫(主面板, [(方塊X, 方塊Y)])
                已揭露方塊[方塊X][方塊Y] = True # 設box為"已看"
                if 第一個按方塊 == None: # 現在的方塊是第一個按的方塊
                    第一個按方塊 = (方塊X, 方塊Y)
                else: # 現在的方塊是第二個按的方塊
                    # 檢查兩者是否一樣
                    圖像1形狀, 圖像1顏色 = 決定顏色形狀(主面板, 第一個按方塊[0], 第一個按方塊[1])
                    圖像2形狀, 圖像2顏色 = 決定顏色形狀(主面板, 方塊X, 方塊Y)

                    if 圖像1形狀 != 圖像2形狀 or 圖像1顏色 != 圖像2顏色:
                        # 圖像不一樣,關上
                        時間等待(1000) # 1000 毫秒 = 1 秒
                        覆蓋方塊們的動畫(主面板, [(第一個按方塊[0], 第一個按方塊[1]), (方塊X, 方塊Y)])
                        已揭露方塊[第一個按方塊[0]][第一個按方塊[1]] = False
                        已揭露方塊[方塊X][方塊Y] = False
                    elif 已贏(已揭露方塊): # 檢查所有配對是否找到
                        破關動畫(主面板)
                        時間等待(2000)

                        # 重設面板
                        主面板 = 取得隨機面板()
                        已揭露方塊 = 隨機秀出方塊(False)

                        # 秀出未揭露面板一秒
                        畫出面板(主面板, 已揭露方塊)
                        畫面更新()
                        時間等待(1000)

                        # 重播啟動遊戲動畫
                        啟動遊戲動畫(主面板)
                    第一個按方塊 = None # 重設第一個按的方塊

        # 畫出螢幕畫面等時間
        畫面更新()
        畫面更新率鐘.tick(畫面更新率)


def 隨機秀出方塊(val):
    已揭露方塊 = []
    for i in 範圍(行):
        已揭露方塊.append([val] * 列)
    return 已揭露方塊


def 取得隨機面板():# 取得所有可能形狀和顏色配對的清單
    圖 = []
    for 顏色 in 所有顏色:
        for 形狀 in 所有形狀:
            圖.append( (形狀, 顏色) )

    隨機洗牌(圖) # 隨機找出清單上圖
    使用圖像數量 = int(行 * 列 / 2) # 計算需要多少圖
    圖 = 圖[:使用圖像數量] * 2 #畫出兩個
    隨機洗牌(圖)

    # 畫出面板,隨機的圖
    面板 = []
    for x in 範圍(行):
        column = []
        for y in 範圍(列):
            column.append(圖[0])
            del 圖[0] # 我們指他時移除圖 
        面板.append(column)
    return 面板


def 分成群(方塊群尺寸, 清單):
    # 將一個清單再細分出許多小清單,小清單有最多可能方塊群尺寸數量
    結果 = []
    for i in 範圍(0, len(清單), 方塊群尺寸):
        結果.append(清單[i:i + 方塊群尺寸])
    return 結果


def 左上方塊(方塊X, 方塊Y):
    # 將面板向量轉成像素
    左 = 方塊X * (方塊尺寸 + 溝尺寸) + X邊
    上 = 方塊Y * (方塊尺寸 + 溝尺寸) + Y邊
    return (左, 上)


def 取得方塊像素(x, y):
    for 方塊X in 範圍(行):
        for 方塊Y in 範圍(列):
            左, 上 = 左上方塊(方塊X, 方塊Y)
            boxRect = pygame.Rect(左, 上, 方塊尺寸, 方塊尺寸)
            if boxRect.collidepoint(x, y):
                return (方塊X, 方塊Y)
    return (None, None)


def 畫圖(形狀, 顏色, 方塊X, 方塊Y):
    四分之一 = int(方塊尺寸 * 0.25)
    一半 =    int(方塊尺寸 * 0.5) 

    左, 上 = 左上方塊(方塊X, 方塊Y) #取得像素

    # 畫出圖形
    if 形狀 == 甜甜圈:
        畫圓形(版面顯示, 顏色, (左 + 一半, 上 + 一半), 一半 - 5)
        畫圓形(版面顯示, 背景色, (左 + 一半, 上 + 一半), 四分之一 - 5)
    elif 形狀 == 正方形:
        畫方形(版面顯示, 顏色, (左 + 四分之一, 上 + 四分之一, 方塊尺寸 - 一半, 方塊尺寸 - 一半))
    elif 形狀 == 鑽石:
        畫出多角形(版面顯示, 顏色, ((左 + 一半, 上), (左 + 方塊尺寸 - 1, 上 + 一半), (左 + 一半, 上 + 方塊尺寸 - 1), (左, 上 + 一半)))
    elif 形狀 == 線:
        for i in 範圍(0, 方塊尺寸, 4):
            畫線(版面顯示, 顏色, (左, 上 + i), (左 + i, 上))
            畫線(版面顯示, 顏色, (左 + i, 上 + 方塊尺寸 - 1), (左 + 方塊尺寸 - 1, 上 + i))
    elif 形狀 == 橢圓:
        畫橢圓(版面顯示, 顏色, (左, 上 + 四分之一, 方塊尺寸, 一半))


def 決定顏色形狀(面板, 方塊X, 方塊Y):
    # 形狀存在面板[x][y][0]
    # 顏色存在面板[x][y][1]
    return 面板[方塊X][方塊Y][0], 面板[方塊X][方塊Y][1]


def 畫出蓋子(面板, 方塊們, 覆蓋):
    for 方塊 in 方塊們:
        左, 上 = 左上方塊(方塊[0], 方塊[1])
        畫方形(版面顯示, 背景色, (左, 上, 方塊尺寸, 方塊尺寸))
        形狀, 顏色 = 決定顏色形狀(面板, 方塊[0], 方塊[1])
        畫圖(形狀, 顏色, 方塊[0], 方塊[1])
        if 覆蓋 > 0: 
            畫方形(版面顯示, 方塊顏色, (左, 上, 覆蓋, 方塊尺寸))
    畫面更新()
    畫面更新率鐘.tick(畫面更新率)


def 揭露答案動畫(面板, 要揭露的方塊):
    for 覆蓋 in 範圍(方塊尺寸, (-揭露速度) - 1, -揭露速度):
        畫出蓋子(面板, 要揭露的方塊, 覆蓋)


def 覆蓋方塊們的動畫(面板, 要覆蓋的方塊):
    for 覆蓋 in 範圍(0, 方塊尺寸 + 揭露速度, 揭露速度):
        畫出蓋子(面板, 要覆蓋的方塊, 覆蓋)


def 畫出面板(面板, 揭露):
    for 方塊X in 範圍(行):
        for 方塊Y in 範圍(列):
            左, 上 = 左上方塊(方塊X, 方塊Y)
            if not 揭露[方塊X][方塊Y]:
                # 畫出隱藏方塊
                畫方形(版面顯示, 方塊顏色, (左, 上, 方塊尺寸, 方塊尺寸))
            else:
                # 畫初揭露方塊
                形狀, 顏色 = 決定顏色形狀(面板, 方塊X, 方塊Y)
                畫圖(形狀, 顏色, 方塊X, 方塊Y)


def 畫亮的方塊(方塊X, 方塊Y):
    左, 上 = 左上方塊(方塊X, 方塊Y)
    畫方形(版面顯示, 亮色, (左 - 5, 上 - 5, 方塊尺寸 + 10, 方塊尺寸 + 10), 4)


def 啟動遊戲動畫(面板):# 啟動秀出八個方塊答案動畫
    覆蓋方塊們 = 隨機秀出方塊(False)
    方塊們 = []
    for x in 範圍(行):
        for y in 範圍(列):
            方塊們.append( (x, y) )
    隨機洗牌(方塊們)
    方塊群們 = 分成群(8, 方塊們)

    畫出面板(面板, 覆蓋方塊們)
    for 方塊群 in 方塊群們:
        揭露答案動畫(面板, 方塊群)
        覆蓋方塊們的動畫(面板, 方塊群)


def 破關動畫(面板):
    覆蓋方塊們 = 隨機秀出方塊(True)
    顏色1 = 亮背景色
    顏色2 = 背景色

    for i in 範圍(13):
        顏色1, 顏色2 = 顏色2, 顏色1 # 交換顏色
        版面顯示.fill(顏色1)
        畫出面板(面板, 覆蓋方塊們)
        畫面更新()
        時間等待(300)


def 已贏(已揭露方塊):
    # 回傳T如果全部方塊都已揭露 ,否則回傳F
    for i in 已揭露方塊:
        if False in i:
            return False
    return True


if __name__ == '__main__':
    主程式()

